"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["node_modules_thirdweb-dev_sdk_dist_vote-b114afd4_browser_esm_js"],{

/***/ "./node_modules/@thirdweb-dev/sdk/dist/vote-b114afd4.browser.esm.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/sdk/dist/vote-b114afd4.browser.esm.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Vote: function() { return /* binding */ Vote; }\n/* harmony export */ });\n/* harmony import */ var _QueryParams_fadca675_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./QueryParams-fadca675.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/QueryParams-fadca675.browser.esm.js\");\n/* harmony import */ var _contract_publisher_a2b0c5c5_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./contract-publisher-a2b0c5c5.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/contract-publisher-a2b0c5c5.browser.esm.js\");\n/* harmony import */ var _thirdweb_dev_contracts_js_dist_abis_IERC20_json__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @thirdweb-dev/contracts-js/dist/abis/IERC20.json */ \"./node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC20.json\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\n/* harmony import */ var _Vote_3b66775c_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Vote-3b66775c.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/Vote-3b66775c.browser.esm.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bn.js */ \"./node_modules/bn.js/lib/bn.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tiny-invariant */ \"./node_modules/tiny-invariant/dist/esm/tiny-invariant.js\");\n/* harmony import */ var merkletreejs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! merkletreejs */ \"./node_modules/merkletreejs/dist/index.js\");\n/* harmony import */ var merkletreejs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(merkletreejs__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! fast-deep-equal */ \"./node_modules/fast-deep-equal/index.js\");\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(fast_deep_equal__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! bs58 */ \"./node_modules/bs58/index.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(bs58__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! eventemitter3 */ \"./node_modules/eventemitter3/index.mjs\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! cross-fetch */ \"./node_modules/cross-fetch/dist/browser-ponyfill.js\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Create a decentralized organization for token holders to vote on proposals.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"vote\");\n * ```\n *\n * @public\n */\nclass Vote {\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, storage) {\n    var _this = this;\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new _contract_publisher_a2b0c5c5_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.d6(network, address, abi, options, storage);\n    (0,_QueryParams_fadca675_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__._)(this, \"contractWrapper\", void 0);\n    (0,_QueryParams_fadca675_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__._)(this, \"storage\", void 0);\n    (0,_QueryParams_fadca675_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__._)(this, \"abi\", void 0);\n    (0,_QueryParams_fadca675_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__._)(this, \"metadata\", void 0);\n    (0,_QueryParams_fadca675_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__._)(this, \"app\", void 0);\n    (0,_QueryParams_fadca675_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__._)(this, \"encoder\", void 0);\n    (0,_QueryParams_fadca675_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__._)(this, \"estimator\", void 0);\n    (0,_QueryParams_fadca675_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__._)(this, \"events\", void 0);\n    /**\n     * @internal\n     */\n    (0,_QueryParams_fadca675_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__._)(this, \"interceptor\", void 0);\n    (0,_QueryParams_fadca675_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__._)(this, \"_chainId\", void 0);\n    /** ******************************\n     * WRITE FUNCTIONS\n     *******************************/\n    /**\n     * Create Proposal\n     *\n     * @remarks Create a new proposal for token holders to vote on.\n     *\n     * @example\n     * ```javascript\n     * // The description of the proposal you want to pass\n     * const description = \"This is a great proposal - vote for it!\"\n     * // You can (optionally) pass in contract calls that will get executed when the proposal is executed.\n     * const executions = [\n     *   {\n     *     // The contract you want to make a call to\n     *     toAddress: \"0x...\",\n     *     // The amount of the native currency to send in this transaction\n     *     nativeTokenValue: 0,\n     *     // Transaction data that will be executed when the proposal is executed\n     *     // This is an example transfer transaction with a token contract (which you would need to set up in code)\n     *     transactionData: tokenContract.encoder.encode(\n     *       \"transfer\", [\n     *         fromAddress,\n     *         amount,\n     *       ]\n     *     ),\n     *   }\n     * ]\n     *\n     * const proposal = await contract.propose(description, executions);\n     * ```\n     *\n     * @param description - The description of the proposal.\n     * @param executions - A set of executable transactions that will be run if the proposal is passed and executed.\n     * @returns - The id of the created proposal and the transaction receipt.\n     */\n    (0,_QueryParams_fadca675_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__._)(this, \"propose\", /* @__PURE__ */(0,_contract_publisher_a2b0c5c5_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.dd)(async (description, executions) => {\n      if (!executions) {\n        executions = [{\n          toAddress: this.contractWrapper.readContract.address,\n          nativeTokenValue: 0,\n          transactionData: \"0x\"\n        }];\n      }\n      const tos = executions.map(p => p.toAddress);\n      const values = executions.map(p => p.nativeTokenValue);\n      const datas = executions.map(p => p.transactionData);\n      return _contract_publisher_a2b0c5c5_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.aV.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"propose\",\n        args: [tos, values, datas, description],\n        parse: receipt => {\n          const event = this.contractWrapper.parseLogs(\"ProposalCreated\", receipt?.logs);\n          return {\n            id: event[0].args.proposalId,\n            receipt\n          };\n        }\n      });\n    }));\n    /**\n     * Vote\n     *\n     * @remarks Vote on an active proposal\n     *\n     * @example\n     * ```javascript\n     * // The proposal ID of the proposal you want to vote on\n     * const proposalId = \"0\";\n     * // The vote type you want to cast, can be VoteType.Against, VoteType.For, or VoteType.Abstain\n     * const voteType = VoteType.For;\n     * // The (optional) reason for the vote\n     * const reason = \"I like this proposal!\";\n     *\n     * await contract.vote(proposalId, voteType, reason);\n     * ```\n     * @param proposalId - The proposal to cast a vote on.\n     * @param voteType - The position the voter is taking on their vote.\n     * @param reason - (optional) The reason for the vote.\n     */\n    (0,_QueryParams_fadca675_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__._)(this, \"vote\", /* @__PURE__ */(0,_contract_publisher_a2b0c5c5_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.dd)(async function (proposalId, voteType) {\n      let reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n      await _this.ensureExists(proposalId);\n      return _contract_publisher_a2b0c5c5_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.aV.fromContractWrapper({\n        contractWrapper: _this.contractWrapper,\n        method: \"castVoteWithReason\",\n        args: [proposalId, voteType, reason]\n      });\n    }));\n    /**\n     * Execute Proposal\n     *\n     * @remarks Execute the related transactions for a proposal if the proposal succeeded.\n     *\n     * @example\n     * ```javascript\n     * // The proposal ID of the proposal you want to execute\n     * const proposalId = \"0\"\n     * await contract.execute(proposalId);\n     * ```\n     *\n     * @param proposalId - The proposal id to execute.\n     */\n    (0,_QueryParams_fadca675_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__._)(this, \"execute\", /* @__PURE__ */(0,_contract_publisher_a2b0c5c5_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.dd)(async proposalId => {\n      await this.ensureExists(proposalId);\n      const proposal = await this.get(proposalId);\n      const tos = proposal.executions.map(p => p.toAddress);\n      const values = proposal.executions.map(p => p.nativeTokenValue);\n      const datas = proposal.executions.map(p => p.transactionData);\n      const descriptionHash = ethers__WEBPACK_IMPORTED_MODULE_9__.utils.id(proposal.description);\n      return _contract_publisher_a2b0c5c5_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.aV.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"execute\",\n        args: [tos, values, datas, descriptionHash]\n      });\n    }));\n    this._chainId = chainId;\n    this.abi = _contract_publisher_a2b0c5c5_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.e.parse(abi || []);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new _contract_publisher_a2b0c5c5_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.ag(this.contractWrapper, _contract_publisher_a2b0c5c5_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.dL, this.storage);\n    this.app = new _contract_publisher_a2b0c5c5_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.a$(this.contractWrapper, this.metadata, this.storage);\n    this.encoder = new _contract_publisher_a2b0c5c5_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.af(this.contractWrapper);\n    this.estimator = new _contract_publisher_a2b0c5c5_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.aP(this.contractWrapper);\n    this.events = new _contract_publisher_a2b0c5c5_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.aQ(this.contractWrapper);\n    this.interceptor = new _contract_publisher_a2b0c5c5_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.aR(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a proposal by id.\n   *\n   * @param proposalId - The proposal id to get.\n   * @returns - The proposal.\n   */\n  async get(proposalId) {\n    const all = await this.getAll();\n    const proposals = all.filter(p => p.proposalId.eq(ethers__WEBPACK_IMPORTED_MODULE_9__.BigNumber.from(proposalId)));\n    if (proposals.length === 0) {\n      throw new Error(\"proposal not found\");\n    }\n    return proposals[0];\n  }\n\n  /**\n   * Get All Proposals\n   *\n   * @remarks Get all the proposals in this contract.\n   *\n   * @example\n   * ```javascript\n   * const proposals = await contract.getAll();\n   * console.log(proposals);\n   * ```\n   *\n   * @returns - All the proposals in the contract.\n   */\n  async getAll() {\n    return Promise.all((await this.contractWrapper.readContract.getAllProposals()).map(async data => ({\n      proposalId: data.proposalId,\n      proposer: data.proposer,\n      description: data.description,\n      startBlock: data.startBlock,\n      endBlock: data.endBlock,\n      state: await this.contractWrapper.readContract.state(data.proposalId),\n      votes: await this.getProposalVotes(data.proposalId),\n      executions: data[3].map((c, i) => ({\n        toAddress: data.targets[i],\n        nativeTokenValue: c,\n        transactionData: data.calldatas[i]\n      }))\n    })));\n  }\n\n  /**\n   * Get the votes for a specific proposal\n   * @param proposalId - the proposalId\n   */\n  async getProposalVotes(proposalId) {\n    const votes = await this.contractWrapper.readContract.proposalVotes(proposalId);\n    return [{\n      type: _Vote_3b66775c_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__.V.Against,\n      label: \"Against\",\n      count: votes.againstVotes\n    }, {\n      type: _Vote_3b66775c_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__.V.For,\n      label: \"For\",\n      count: votes.forVotes\n    }, {\n      type: _Vote_3b66775c_browser_esm_js__WEBPACK_IMPORTED_MODULE_10__.V.Abstain,\n      label: \"Abstain\",\n      count: votes.abstainVotes\n    }];\n  }\n\n  /**\n   * Check If Wallet Voted\n   *\n   * @remarks Check if a specified wallet has voted a specific proposal\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to check\n   * const proposalId = \"0\";\n   * // The address of the wallet you want to check to see if they voted\n   * const address = \"{{wallet_address}}\";\n   *\n   * await contract.hasVoted(proposalId, address);\n   * ```\n   *\n   * @param proposalId - The unique identifier of a proposal .\n   * @param account - (optional) wallet account address. Defaults to connected signer.\n   * @returns - True if the account has already voted on the proposal.\n   */\n  async hasVoted(proposalId, account) {\n    if (!account) {\n      account = await this.contractWrapper.getSignerAddress();\n    }\n    return this.contractWrapper.readContract.hasVoted(proposalId, await (0,_contract_publisher_a2b0c5c5_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.cs)(account));\n  }\n\n  /**\n   * Can Execute\n   *\n   * @remarks Check if a proposal can be executed (if the proposal has succeeded).\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to check\n   * const proposalId = \"0\";\n   * const canExecute = await contract.canExecute(proposalId);\n   * console.log(canExecute);\n   * ```\n   *\n   * @param proposalId - The proposal ID to check.\n   * @returns - True if the proposal can be executed, false otherwise.\n   */\n  async canExecute(proposalId) {\n    await this.ensureExists(proposalId);\n    const proposal = await this.get(proposalId);\n    const tos = proposal.executions.map(p => p.toAddress);\n    const values = proposal.executions.map(p => p.nativeTokenValue);\n    const datas = proposal.executions.map(p => p.transactionData);\n    const descriptionHash = ethers__WEBPACK_IMPORTED_MODULE_9__.utils.id(proposal.description);\n    try {\n      await this.contractWrapper.callStatic().execute(tos, values, datas, descriptionHash);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Check the balance of the project wallet in the native token of the chain\n   *\n   * @returns - The balance of the project in the native token of the chain\n   */\n  async balance() {\n    const balance = await this.contractWrapper.readContract.provider.getBalance(this.contractWrapper.readContract.address);\n    return {\n      name: \"\",\n      symbol: \"\",\n      decimals: 18,\n      value: balance,\n      displayValue: ethers__WEBPACK_IMPORTED_MODULE_9__.utils.formatUnits(balance, 18)\n    };\n  }\n\n  /**\n   * Check the balance of the project wallet in a particular\n   * ERC20 token contract\n   *\n   * @returns - The balance of the project in the native token of the chain\n   */\n  async balanceOfToken(tokenAddress) {\n    const erc20 = new ethers__WEBPACK_IMPORTED_MODULE_9__.Contract(await (0,_contract_publisher_a2b0c5c5_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.cs)(tokenAddress), _thirdweb_dev_contracts_js_dist_abis_IERC20_json__WEBPACK_IMPORTED_MODULE_11__, this.contractWrapper.getProvider());\n    return await (0,_contract_publisher_a2b0c5c5_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.bd)(this.contractWrapper.getProvider(), tokenAddress, await erc20.balanceOf(this.contractWrapper.readContract.address));\n  }\n\n  /**\n   * Find a proposal by its id.\n   *\n   * @internal\n   * @param proposalId - Proposal to check for\n   */\n  async ensureExists(proposalId) {\n    try {\n      await this.contractWrapper.readContract.state(proposalId);\n    } catch (e) {\n      throw Error(`Proposal ${proposalId} not found`);\n    }\n  }\n\n  /**\n   * Get the Vote contract configuration\n   */\n  async settings() {\n    const [votingDelay, votingPeriod, votingTokenAddress, votingQuorumFraction, proposalTokenThreshold] = await Promise.all([this.contractWrapper.readContract.votingDelay(), this.contractWrapper.readContract.votingPeriod(), this.contractWrapper.readContract.token(), this.contractWrapper.readContract[\"quorumNumerator()\"](), this.contractWrapper.readContract.proposalThreshold()]);\n    const votingTokenMetadata = await (0,_contract_publisher_a2b0c5c5_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.bc)(this.contractWrapper.getProvider(), votingTokenAddress);\n    return {\n      votingDelay: votingDelay.toString(),\n      votingPeriod: votingPeriod.toString(),\n      votingTokenAddress,\n      votingTokenMetadata,\n      votingQuorumFraction: votingQuorumFraction.toString(),\n      proposalTokenThreshold: proposalTokenThreshold.toString()\n    };\n  }\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return _contract_publisher_a2b0c5c5_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.aV.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@thirdweb-dev/sdk/dist/vote-b114afd4.browser.esm.js\n"));

/***/ })

}]);